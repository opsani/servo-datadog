#!/usr/bin/env python3

import os
import sys
import time

from datadog import initialize
from datadog import api as dog

from measure import Measure, ST_FAILED

DESC="Datadog measure driver for Opsani Optune"
VERSION="1.0.0"
HAS_CANCEL=True
PROGRESS_INTERVAL=30

DFLT_WARMUP     = 0
DFLT_DURATION   = 120
DFLT_TIME_AGGR  = 'avg'
DFLT_SPACE_AGGR = 'avg'
AGGR_OPERATORS  = ('avg', 'max', 'min', 'sum')
API_KEY_FPATH   = '/etc/optune-datadog-auth/api_key'
APP_KEY_FPATH   = '/etc/optune-datadog-auth/app_key'

class Datadog(Measure):

    # overwrites super
    def describe(self):

        # get dict of metrics active in the last 24 hours
        self._init_datadog()
        from_time = int(time.time()) - (60 * 60 * 24)
        data = dog.Metric.list(from_time)
        self.debug('Datadog describe response: ', data)

        # validate and return metrics
        assert 'metrics' in data, \
            'Datadog server did not return list of active metrics'
        assert len(data['metrics']) > 0, \
            'Datadog server returned empty list of metrics'
        metrics = {m:{} for m in data['metrics']}
        return metrics

    # overwrites super
    def handle_cancel(self, signal, frame):
        err = 'Exiting due to signal: {}'.format(signal)
        self.print_measure_error(err, ST_FAILED)
        sys.exit(3)

    # overwrites super
    def measure(self):

        # parse and valcheck control configuration
        assert 'control' in self.input_data, 'Input data missing control configuration'
        control  = self.input_data['control']
        warmup   = int(control.get('warmup', DFLT_WARMUP))
        duration = int(control.get('duration', DFLT_DURATION))
        assert warmup >= 0 and duration >= 0, \
            'Both warmup {} and duration {} must be non-negative'.format(warmup, duration)
        assert 'userdata' in control, 'Control configuration missing userdata'
        userdata = control['userdata']
        assert 'query' in userdata, 'Query missing from control configuration userdata'
        query = userdata['query'].replace(' ','')
        time_aggr = userdata.get('time_aggr', DFLT_TIME_AGGR)
        assert time_aggr in AGGR_OPERATORS, \
            'Unknown time_aggr {}'.format(time_aggr)
        space_aggr  = userdata.get('space_aggr', DFLT_SPACE_AGGR)
        assert space_aggr in AGGR_OPERATORS, \
            'Unknown space_aggr {}'.format(space_aggr)

        # query datadog:  verify query is valid
        self._init_datadog()
        qval = self._query_datadog_metric(query, time_aggr, space_aggr, duration)
        self.debug('Initial value for query {}:  {}'.format(query, qval))

        # sleep
        self.t_sleep = warmup + duration
        self.debug('Sleeping for {:d} seconds ({:d} warmup + {:d} duration)'.format(
            self.t_sleep, warmup, duration))
        time.sleep(self.t_sleep)

        # query datadog:  measure
        qval = self._query_datadog_metric(query, time_aggr, space_aggr, duration)

        # construct result:  use computed value for perf metric
        metrics = {
            'perf': {
                'value' : qval,
                'annotation': query,
            }
        }
        annotations = {}

        return metrics, annotations

    # overwrites super:  update progress before printing it
    def print_progress(
            self,
            message=None,
            msg_index=None,
            stage=None,
            stageprogress=None):

        # update progress based on how much time has elapsed
        t_taken = time.time() - self.t_measure_start
        self.progress = int(min(100.0, 100.0*((t_taken)/self.t_sleep)))
        super().print_progress(message, msg_index, stage, stageprogress)

    # helper:  initialize datadog api module
    def _init_datadog(self):

        # as required:  read api_key and app_key from files (e.g., from k8s
        # secret volume mounted files)
        if not hasattr(self, 'datadog_api_key'):
            assert os.path.isfile(API_KEY_FPATH), \
                'Datadog api_key file {} does not exist'.format(API_KEY_FPATH)
            with open(API_KEY_FPATH, 'r') as f:
                self.datadog_api_key = f.read()
        if not hasattr(self, 'datadog_app_key'):
            assert os.path.isfile(APP_KEY_FPATH), \
                'Datadog app_key file {} does not exist'.format(APP_KEY_FPATH)
            with open(APP_KEY_FPATH, 'r') as f:
                self.datadog_app_key = f.read()

        # initialize datadog api module
        options = {
            'api_key': self.datadog_api_key,
            'app_key': self.datadog_app_key
        }
        try:
            initialize(**options)
        except Exception as e:
            raise Exception(
                'Failed to initialize Datadog API module. Error: {}'.format(str(e)))

    # helper:  query datadog metrics over last duration seconds and return
    # value computed from aggregating in time and space
    def _query_datadog_metric(self, query, time_aggr, space_aggr, duration):

        # query datadog metrics
        try:
            now = int(time.time())
            data = dog.Metric.query(start=now - duration, end=now, query=query)
        except Exception as e:
            raise Exception(
                'Failed to query Datadog for metric {}. Error: {}'.format(
                    query, str(e)))

        # verify query status and response type
        q_status = data.get('status')
        assert q_status == 'ok', \
            'Datadog query {} returned with status {}'.format(query, q_status)
        q_res_type = data.get('res_type')
        assert q_res_type == 'time_series', \
            'Datadog query {} res_type is not time_series but {}'.format(
            query, q_res_type)

        # get list of metric series from data
        m_series = data.get('series',[])
        assert len(m_series) >= 1, \
            'Datadog query {} returned {} time series pointlists'.format(
            query, len(m_series))

        # aggregate in time
        time_aggr_vals = []
        for s in m_series:
            plist = s.get('pointlist',[])
            assert len(plist) > 0, \
                'Datadog query {} returned empty pointlist for expression {}'.format(
                query, len(plist), s.get('expression'))

            # extract just values from pointlist, aggregate, and save
            # note:  i[0] is the time in UTC milliseconds
            pvals = [i[1] for i in plist]
            time_aggr_vals.append(self._aggregate_values(pvals, time_aggr))

        # aggregate in space and return value
        return self._aggregate_values(time_aggr_vals, space_aggr)

    # helper:  return an aggregate value computed from an input list of values
    def _aggregate_values(self, vals, aggr):
        if aggr == 'avg':
            return sum(vals) / float(len(vals))
        if aggr == 'max':
            return max(vals)
        if aggr == 'min':
            return min(vals)
        if aggr == 'sum':
            return sum(vals)
        raise Exception('Unexpected aggregation method {}'.format(aggr))


if __name__ == '__main__':
    dd = Datadog(VERSION, DESC, HAS_CANCEL, PROGRESS_INTERVAL)
    dd.run()
